// Text format
// breakpoint-name: (font-size, line-height, font-weight, margin-bottom, random-css-property, value);
@mixin media-text($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {

			@if length($list) >= 1 {
				$fz: nth($list, 1);
				@if $fz {
					font-size: calc_rem($fz);
				}
			}

			@if length($list) >= 2 {
				$lh: nth($list, 2);
				@if $lh {
					line-height: calc_rem($lh);
				}
			}

			@if length($list) >= 3 {
				$fw: nth($list, 3);
				@if $fw {
					font-weight: $fw;
				}
			}

			@if length($list) >= 4 {
				$mb: nth($list, 4);
				@if $mb {
					margin-bottom: $mb;
				}
			}

			// payload
			@if length($list) == 6 {
				$parameter: nth($list, 5);
				$value: nth($list, 6);

				#{$parameter}: $value;
			}
		}
	}
}

// Padding through breakpoints
// breakpoint-name: (...padding-top ...padding-right ...padding-bottom ...padding-left);
@mixin media-padding($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {
			@if length($list) == 4 {
				padding: $list;
			}
			@else {
				$pt: nth($list, 1);
				$pr: nth($list, 2);
				$pb: nth($list, 3);
				$pl: nth($list, 4);

				@if $pt {
					padding-top: $pt;
				}
				@if $pr {
					padding-right: $pr;
				}
				@if $pb {
					padding-bottom: $pb;
				}
				@if $pl {
					padding-left: $pl;
				}
			}
		}
	}
}

// Vertical padding through breakpoints
// breakpoint-name: (padding-top padding-bottom);
@mixin media-vpadding($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {
			$pt: nth($list, 1);
			$pb: nth($list, 2);

			@if $pt {
				padding-top: $pt;
			}
			@if $pb {
				padding-bottom: $pb;
			}
		}
	}
}

// Horizontal padding through breakpoints
// breakpoint-name: (padding-left padding-right);
@mixin media-hpadding($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {
			$pl: nth($list, 1);
			$pr: nth($list, 2);

			@if $pl {
				padding-left: $pl;
			}
			@if $pr {
				padding-right: $pr;
			}
		}
	}
}

// Add with and/or height to element
// breakpoint-name: (width, ...height, ...css-property, ...value);
@mixin media-size($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {

			@if length($list) >= 1 {
				$w: nth($list, 1);
				@if $w {
					width: $w;
				}
			}

			@if length($list) >= 2 {
				$h: nth($list, 2);
				@if $h {
					height: $h;
				}
			}

			// payload
			@if length($list) == 4 {
				$parameter: nth($list, 3);
				$value: nth($list, 4);

				#{$parameter}: $value;
			}
		}
	}
}

// breakpoint-name: (css-property, value ...);
@mixin media-style($map) {
	@each $breakpoint, $list in $map {
		@include media-breakpoint-up($breakpoint) {
			@for $i from 0 to length($list) {
				@if length($list) % 2 == 0 {
					@if ($i + 1) % 2 != 0 {
						$property: nth($list, $i + 1);
						$value: nth($list, $i + 2);

						#{$property}: $value;
					}
				}
			}
		}
	}
}

// mixin aliases
@mixin media-up($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($name, $breakpoints) {
		@content;
	}
}

@mixin media-down($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-down($name, $breakpoints) {
		@content;
	}
}

@mixin media-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-between($lower, $upper, $breakpoints) {
		@content;
	}
}

@mixin media-only($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-only($name, $breakpoints) {
		@content;
	}
}

@mixin up($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-up($name, $breakpoints) {
		@content;
	}
}

@mixin down($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-down($name, $breakpoints) {
		@content;
	}
}

@mixin between($lower, $upper, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-between($lower, $upper, $breakpoints) {
		@content;
	}
}

@mixin only($name, $breakpoints: $grid-breakpoints) {
	@include media-breakpoint-only($name, $breakpoints) {
		@content;
	}
}
